import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { motion, AnimatePresence, useAnimation } from 'framer-motion';

// üé® –î–ò–ó–ê–ô–ù –°–ò–°–¢–ï–ú–ê –ò –ö–û–ù–°–¢–ê–ù–¢–´
const THEME = {
  colors: {
    primary: '#0088cc',
    secondary: '#FFD700',
    success: '#28a745',
    warning: '#ffc107',
    danger: '#dc3545',
    dark: '#1a1a1a',
    light: '#f8f9fa',
    gradient: {
      primary: 'linear-gradient(135deg, #0088cc 0%, #0066aa 100%)',
      gold: 'linear-gradient(135deg, #FFD700 0%, #FFA500 100%)',
      sunset: 'linear-gradient(135deg, #ff6b6b 0%, #feca57 100%)',
      ocean: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
    }
  },
  shadows: {
    sm: '0 2px 4px rgba(0,0,0,0.1)',
    md: '0 4px 12px rgba(0,0,0,0.15)',
    lg: '0 10px 30px rgba(0,0,0,0.2)',
    glow: '0 0 20px rgba(0,136,204,0.5)'
  },
  animations: {
    spring: { type: "spring", stiffness: 300, damping: 30 },
    smooth: { duration: 0.5, ease: [0.43, 0.13, 0.23, 0.96] },
    bounce: { type: "spring", stiffness: 400, damping: 10 }
  }
};

// üìä –ú–û–ö–û–í–´–ï –î–ê–ù–ù–´–ï
const SERVICES = [
  {
    id: '1',
    category: 'excursions',
    name: { ru: '–û–±–∑–æ—Ä–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –î—É–±–∞—é', en: 'Dubai City Tour' },
    description: { ru: '–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ª—É—á—à–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –î—É–±–∞—è –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å' },
    price: 250,
    oldPrice: 350,
    currency: 'AED',
    duration: 240,
    rating: 4.9,
    reviewsCount: 234,
    images: ['https://images.unsplash.com/photo-1512453979798-5ea266f8880c?w=800'],
    instantBooking: true,
    featured: true,
    tags: ['–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ', '–±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä'],
    availableSlots: 12
  },
  {
    id: '2',
    category: 'parks',
    name: { ru: 'Ferrari World Abu Dhabi', en: 'Ferrari World Abu Dhabi' },
    description: { ru: '–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫—Ä—ã—Ç—ã–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∫ –≤ –º–∏—Ä–µ' },
    price: 385,
    currency: 'AED',
    duration: 480,
    rating: 4.8,
    reviewsCount: 189,
    images: ['https://images.unsplash.com/photo-1570097692059-89e0f2733d5e?w=800'],
    instantBooking: true,
    tags: ['–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω', '—Å–µ–º–µ–π–Ω–æ–µ']
  },
  {
    id: '3',
    category: 'yachts',
    name: { ru: '–ê—Ä–µ–Ω–¥–∞ —è—Ö—Ç—ã —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º', en: 'Yacht Rental with Captain' },
    description: { ru: '–†–æ—Å–∫–æ—à–Ω–∞—è —è—Ö—Ç–∞ –Ω–∞ 10 —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–≥–æ –æ—Ç–¥—ã—Ö–∞' },
    price: 1500,
    oldPrice: 2000,
    currency: 'AED',
    duration: 240,
    rating: 5.0,
    reviewsCount: 67,
    images: ['https://images.unsplash.com/photo-1569263979104-865ab7cd8d13?w=800'],
    instantBooking: false,
    tags: ['VIP', '—Ä–æ–º–∞–Ω—Ç–∏–∫–∞']
  },
  {
    id: '4',
    category: 'attractions',
    name: { ru: '–ë—É—Ä–¥–∂-–•–∞–ª–∏—Ñ–∞: 124 + 125 —ç—Ç–∞–∂', en: 'Burj Khalifa: Level 124 + 125' },
    description: { ru: '–ü–æ—Å–µ—Ç–∏—Ç–µ —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∑–¥–∞–Ω–∏–µ –≤ –º–∏—Ä–µ' },
    price: 189,
    currency: 'AED',
    duration: 90,
    rating: 4.7,
    reviewsCount: 512,
    images: ['https://images.unsplash.com/photo-1580674285054-bed31e145f59?w=800'],
    instantBooking: true,
    tags: ['must-see', '—Ñ–æ—Ç–æ'],
    availableSlots: 8
  },
  {
    id: '5',
    category: 'cars',
    name: { ru: 'Lamborghini Huracan - –∞—Ä–µ–Ω–¥–∞', en: 'Lamborghini Huracan Rental' },
    description: { ru: '–ü—Ä–æ–∫–∞—Ç —Å—É–ø–µ—Ä–∫–∞—Ä–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∫ –æ—Ç–µ–ª—é' },
    price: 3500,
    currency: 'AED',
    duration: 1440,
    rating: 5.0,
    reviewsCount: 45,
    images: ['https://images.unsplash.com/photo-1553440569-bcc63803a83d?w=800'],
    instantBooking: false,
    tags: ['luxury', '—ç–∫—Å–∫–ª—é–∑–∏–≤']
  }
];

const CATEGORIES = [
  { id: 'all', name: { ru: '–í—Å–µ —É—Å–ª—É–≥–∏', en: 'All Services' }, icon: 'üèÜ', count: 156 },
  { id: 'excursions', name: { ru: '–≠–∫—Å–∫—É—Ä—Å–∏–∏', en: 'Tours' }, icon: 'üó∫Ô∏è', count: 45 },
  { id: 'parks', name: { ru: '–ü–∞—Ä–∫–∏', en: 'Parks' }, icon: 'üé¢', count: 28 },
  { id: 'attractions', name: { ru: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', en: 'Attractions' }, icon: 'üèõÔ∏è', count: 34 },
  { id: 'yachts', name: { ru: '–Ø—Ö—Ç—ã', en: 'Yachts' }, icon: '‚õµ', count: 25 },
  { id: 'cars', name: { ru: '–ê–≤—Ç–æ', en: 'Cars' }, icon: 'üèéÔ∏è', count: 24 }
];

// üîß TELEGRAM WEBAPP HOOK
const useTelegram = () => {
  const [webApp, setWebApp] = useState(null);
  const [user, setUser] = useState({
    id: 123456789,
    first_name: '–ò–≤–∞–Ω',
    last_name: '–ò–≤–∞–Ω–æ–≤',
    username: 'ivan_ivanov',
    language_code: 'ru'
  });

  useEffect(() => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç window.Telegram.WebApp
    const tg = {
      ready: () => console.log('Telegram WebApp ready'),
      expand: () => console.log('Expanded'),
      MainButton: {
        show: () => console.log('Main button shown'),
        hide: () => console.log('Main button hidden'),
        setText: (text) => console.log('Button text:', text),
        onClick: (callback) => console.log('Button click handler set')
      },
      BackButton: {
        show: () => console.log('Back button shown'),
        hide: () => console.log('Back button hidden')
      },
      HapticFeedback: {
        impactOccurred: (style) => console.log('Haptic:', style),
        notificationOccurred: (type) => console.log('Notification:', type)
      },
      themeParams: {
        bg_color: '#ffffff',
        text_color: '#000000',
        button_color: '#0088cc',
        button_text_color: '#ffffff'
      }
    };
    
    setWebApp(tg);
    tg.ready();
    tg.expand();
  }, []);

  return { webApp, user };
};

// üé≠ –ê–ù–ò–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´
const AnimatedCard = ({ children, delay = 0, ...props }) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    exit={{ opacity: 0, y: -20 }}
    transition={{ delay, ...THEME.animations.smooth }}
    whileHover={{ scale: 1.02, transition: THEME.animations.spring }}
    whileTap={{ scale: 0.98 }}
    {...props}
  >
    {children}
  </motion.div>
);

const PulseButton = ({ children, onClick, variant = 'primary', size = 'md', ...props }) => {
  const pulseAnimation = {
    scale: [1, 1.05, 1],
    transition: { duration: 2, repeat: Infinity }
  };

  const sizeClasses = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-5 py-2.5 text-base',
    lg: 'px-8 py-4 text-lg'
  };

  const variantStyles = {
    primary: {
      background: THEME.colors.gradient.primary,
      color: 'white',
      boxShadow: THEME.shadows.md
    },
    secondary: {
      background: THEME.colors.gradient.gold,
      color: THEME.colors.dark,
      boxShadow: THEME.shadows.md
    },
    outline: {
      background: 'transparent',
      border: `2px solid ${THEME.colors.primary}`,
      color: THEME.colors.primary
    }
  };

  return (
    <motion.button
      onClick={onClick}
      className={`rounded-full font-semibold ${sizeClasses[size]} transition-all`}
      style={variantStyles[variant]}
      animate={variant === 'primary' ? pulseAnimation : {}}
      whileHover={{ scale: 1.05, boxShadow: THEME.shadows.lg }}
      whileTap={{ scale: 0.95 }}
      {...props}
    >
      {children}
    </motion.button>
  );
};

// üè† –ì–õ–ê–í–ù–´–ô –≠–ö–†–ê–ù
const HomeScreen = ({ onNavigate }) => {
  const { user } = useTelegram();
  const [activePromo, setActivePromo] = useState(0);
  
  const promos = [
    {
      title: '–°–∫–∏–¥–∫–∞ 30% –Ω–∞ –≤—Å–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏',
      subtitle: '–¢–æ–ª—å–∫–æ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞!',
      gradient: THEME.colors.gradient.sunset,
      image: 'https://images.unsplash.com/photo-1518684079-3c830dcef090?w=800'
    },
    {
      title: 'VIP —Ç—É—Ä—ã —Å –ª–∏—á–Ω—ã–º –≥–∏–¥–æ–º',
      subtitle: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã',
      gradient: THEME.colors.gradient.ocean,
      image: 'https://images.unsplash.com/photo-1582672060674-bc2bd808a8b5?w=800'
    }
  ];

  useEffect(() => {
    const interval = setInterval(() => {
      setActivePromo(prev => (prev + 1) % promos.length);
    }, 4000);
    return () => clearInterval(interval);
  }, []);

  const stats = [
    { label: '–≠–∫—Å–∫—É—Ä—Å–∏–π', value: '156', icon: 'üéØ' },
    { label: '–î–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤', value: '12K+', icon: 'üòä' },
    { label: '–õ–µ—Ç –æ–ø—ã—Ç–∞', value: '8', icon: '‚≠ê' },
    { label: '–ì–∏–¥–æ–≤', value: '45', icon: 'üë•' }
  ];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="min-h-screen bg-gradient-to-br from-blue-50 to-white"
    >
      {/* –®–∞–ø–∫–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º */}
      <div className="relative overflow-hidden bg-gradient-to-r from-blue-600 to-blue-700 text-white p-6 pb-20">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="relative z-10"
        >
          <h1 className="text-2xl font-bold mb-2">
            –ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã
          </h1>
          <p className="text-blue-100">–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ª—É—á—à–µ–µ –≤ –û–ê–≠</p>
        </motion.div>
        
        <motion.div
          className="absolute -right-10 -top-10 w-40 h-40 bg-blue-500 rounded-full opacity-20"
          animate={{ scale: [1, 1.2, 1], rotate: 360 }}
          transition={{ duration: 20, repeat: Infinity }}
        />
        <motion.div
          className="absolute -left-5 -bottom-5 w-32 h-32 bg-blue-400 rounded-full opacity-20"
          animate={{ scale: [1.2, 1, 1.2], rotate: -360 }}
          transition={{ duration: 15, repeat: Infinity }}
        />
      </div>

      {/* –ü—Ä–æ–º–æ —Å–ª–∞–π–¥–µ—Ä */}
      <div className="relative -mt-12 mx-4 mb-6">
        <AnimatePresence mode="wait">
          <motion.div
            key={activePromo}
            initial={{ opacity: 0, x: 100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -100 }}
            transition={THEME.animations.smooth}
            className="relative h-48 rounded-2xl overflow-hidden shadow-xl"
            style={{ background: promos[activePromo].gradient }}
          >
            <img 
              src={promos[activePromo].image} 
              alt="Promo"
              className="absolute inset-0 w-full h-full object-cover opacity-30"
            />
            <div className="relative z-10 p-6 text-white">
              <h2 className="text-2xl font-bold mb-2">{promos[activePromo].title}</h2>
              <p className="text-lg opacity-90">{promos[activePromo].subtitle}</p>
              <PulseButton
                variant="secondary"
                size="sm"
                className="mt-4"
                onClick={() => onNavigate('catalog')}
              >
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
              </PulseButton>
            </div>
          </motion.div>
        </AnimatePresence>
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
        <div className="flex justify-center mt-3 gap-2">
          {promos.map((_, index) => (
            <motion.div
              key={index}
              className={`h-2 rounded-full bg-blue-600 transition-all`}
              animate={{ width: index === activePromo ? 24 : 8 }}
              style={{ opacity: index === activePromo ? 1 : 0.3 }}
            />
          ))}
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="px-4 mb-8">
        <div className="grid grid-cols-4 gap-3">
          {[
            { icon: 'üé´', label: '–ú–æ–∏ –±–∏–ª–µ—Ç—ã', screen: 'bookings', badge: 3 },
            { icon: '‚ù§Ô∏è', label: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', screen: 'favorites' },
            { icon: 'üéÅ', label: '–ê–∫—Ü–∏–∏', screen: 'promos', badge: 'new' },
            { icon: 'üí¨', label: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', screen: 'support' }
          ].map((action, index) => (
            <AnimatedCard key={index} delay={index * 0.1}>
              <motion.div
                className="relative bg-white rounded-2xl p-4 shadow-md text-center"
                whileHover={{ y: -5, boxShadow: THEME.shadows.lg }}
                onClick={() => onNavigate(action.screen)}
              >
                {action.badge && (
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-semibold"
                  >
                    {typeof action.badge === 'number' ? action.badge : '!'}
                  </motion.div>
                )}
                <div className="text-3xl mb-2">{action.icon}</div>
                <div className="text-xs font-medium text-gray-600">{action.label}</div>
              </motion.div>
            </AnimatedCard>
          ))}
        </div>
      </div>

      {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ */}
      <div className="px-4 mb-8">
        <h3 className="text-lg font-bold mb-4 flex items-center justify-between">
          –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
          <span className="text-sm text-blue-600 font-normal">–í—Å–µ ‚Üí</span>
        </h3>
        <div className="grid grid-cols-3 gap-3">
          {CATEGORIES.slice(1).map((category, index) => (
            <AnimatedCard key={category.id} delay={index * 0.05}>
              <motion.div
                className="bg-gradient-to-br from-white to-blue-50 rounded-2xl p-4 text-center shadow-md border border-blue-100"
                whileHover={{ 
                  scale: 1.05,
                  background: 'linear-gradient(135deg, #f0f9ff 0%, #dbeafe 100%)',
                  boxShadow: THEME.shadows.lg
                }}
                onClick={() => onNavigate('catalog', { category: category.id })}
              >
                <motion.div 
                  className="text-4xl mb-2"
                  animate={{ rotate: [0, -10, 10, -10, 0] }}
                  transition={{ duration: 5, repeat: Infinity }}
                >
                  {category.icon}
                </motion.div>
                <div className="text-sm font-semibold text-gray-800">{category.name.ru}</div>
                <div className="text-xs text-gray-500 mt-1">{category.count} —É—Å–ª—É–≥</div>
              </motion.div>
            </AnimatedCard>
          ))}
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="px-4 mb-8">
        <div className="bg-gradient-to-r from-blue-600 to-blue-700 rounded-2xl p-4 shadow-xl">
          <div className="grid grid-cols-4 gap-4">
            {stats.map((stat, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, scale: 0 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.5 + index * 0.1, ...THEME.animations.bounce }}
                className="text-center text-white"
              >
                <div className="text-2xl mb-1">{stat.icon}</div>
                <div className="text-xl font-bold">{stat.value}</div>
                <div className="text-xs opacity-80">{stat.label}</div>
              </motion.div>
            ))}
          </div>
        </div>
      </div>

      {/* CTA –±–ª–æ–∫ */}
      <motion.div
        className="px-4 pb-24"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.8 }}
      >
        <div className="bg-gradient-to-r from-orange-400 to-pink-500 rounded-2xl p-6 text-white shadow-xl">
          <h3 className="text-xl font-bold mb-2">üåü –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h3>
          <p className="mb-4 opacity-90">–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ 3 —ç–∫—Å–∫—É—Ä—Å–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ 4-—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</p>
          <PulseButton
            variant="secondary"
            onClick={() => onNavigate('catalog')}
          >
            –í—ã–±—Ä–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏–∏
          </PulseButton>
        </div>
      </motion.div>
    </motion.div>
  );
};

// üìö –ö–ê–¢–ê–õ–û–ì –£–°–õ–£–ì
const CatalogScreen = ({ onNavigate, category: initialCategory = 'all' }) => {
  const [selectedCategory, setSelectedCategory] = useState(initialCategory);
  const [searchQuery, setSearchQuery] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [favorites, setFavorites] = useState([]);
  const [priceRange, setPriceRange] = useState([0, 5000]);
  const [sortBy, setSortBy] = useState('popular');

  const filteredServices = useMemo(() => {
    let services = SERVICES;
    
    if (selectedCategory !== 'all') {
      services = services.filter(s => s.category === selectedCategory);
    }
    
    if (searchQuery) {
      services = services.filter(s => 
        s.name.ru.toLowerCase().includes(searchQuery.toLowerCase()) ||
        s.description.ru.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    
    services = services.filter(s => s.price >= priceRange[0] && s.price <= priceRange[1]);
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    switch (sortBy) {
      case 'price_asc':
        services.sort((a, b) => a.price - b.price);
        break;
      case 'price_desc':
        services.sort((a, b) => b.price - a.price);
        break;
      case 'rating':
        services.sort((a, b) => b.rating - a.rating);
        break;
      default:
        services.sort((a, b) => b.reviewsCount - a.reviewsCount);
    }
    
    return services;
  }, [selectedCategory, searchQuery, priceRange, sortBy]);

  const toggleFavorite = (serviceId) => {
    setFavorites(prev => 
      prev.includes(serviceId) 
        ? prev.filter(id => id !== serviceId)
        : [...prev, serviceId]
    );
  };

  const ServiceCard = ({ service, index }) => {
    const isFavorite = favorites.includes(service.id);
    
    return (
      <AnimatedCard delay={index * 0.05}>
        <motion.div
          className="bg-white rounded-2xl shadow-lg overflow-hidden"
          whileHover={{ y: -8, boxShadow: THEME.shadows.lg }}
        >
          <div className="relative">
            <img 
              src={service.images[0]} 
              alt={service.name.ru}
              className="w-full h-48 object-cover"
            />
            {service.oldPrice && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="absolute top-3 left-3 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold"
              >
                -{Math.round((1 - service.price / service.oldPrice) * 100)}%
              </motion.div>
            )}
            <motion.button
              className="absolute top-3 right-3 bg-white/90 backdrop-blur-sm rounded-full p-2 shadow-md"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={(e) => {
                e.stopPropagation();
                toggleFavorite(service.id);
              }}
            >
              <motion.span
                animate={{ scale: isFavorite ? [1, 1.3, 1] : 1 }}
                className={`text-xl ${isFavorite ? 'text-red-500' : 'text-gray-400'}`}
              >
                {isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
              </motion.span>
            </motion.button>
            {service.instantBooking && (
              <div className="absolute bottom-3 left-3 bg-green-500 text-white px-3 py-1 rounded-full text-xs font-semibold flex items-center gap-1">
                <span>‚ö°</span> –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
              </div>
            )}
          </div>
          
          <div className="p-4">
            {service.tags && (
              <div className="flex gap-2 mb-2">
                {service.tags.map(tag => (
                  <span key={tag} className="bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs font-medium">
                    {tag}
                  </span>
                ))}
              </div>
            )}
            
            <h3 className="font-bold text-lg mb-1">{service.name.ru}</h3>
            <p className="text-gray-600 text-sm mb-3 line-clamp-2">{service.description.ru}</p>
            
            <div className="flex items-center gap-4 mb-3 text-sm text-gray-500">
              <span className="flex items-center gap-1">
                <span>‚è±Ô∏è</span> {Math.floor(service.duration / 60)}—á
              </span>
              <span className="flex items-center gap-1">
                <span>‚≠ê</span> {service.rating} ({service.reviewsCount})
              </span>
              {service.availableSlots && (
                <span className="flex items-center gap-1 text-green-600">
                  <span>‚úÖ</span> {service.availableSlots} –º–µ—Å—Ç
                </span>
              )}
            </div>
            
            <div className="flex items-center justify-between">
              <div>
                {service.oldPrice && (
                  <span className="text-gray-400 line-through text-sm mr-2">
                    {service.oldPrice} {service.currency}
                  </span>
                )}
                <span className="text-2xl font-bold text-blue-600">
                  {service.price} {service.currency}
                </span>
              </div>
              <PulseButton
                size="sm"
                onClick={() => onNavigate('service', { serviceId: service.id })}
              >
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
              </PulseButton>
            </div>
          </div>
        </motion.div>
      </AnimatedCard>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –®–∞–ø–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º */}
      <div className="sticky top-0 z-40 bg-white shadow-md">
        <div className="p-4">
          <div className="relative">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ —É—Å–ª—É–≥..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-12 py-3 bg-gray-100 rounded-full text-gray-800 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <span className="absolute left-3 top-3.5 text-gray-500">üîç</span>
            <motion.button
              className="absolute right-2 top-2 p-2 bg-blue-600 text-white rounded-full"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => setShowFilters(!showFilters)}
            >
              <span className="text-sm">‚öôÔ∏è</span>
            </motion.button>
          </div>
        </div>
        
        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className="px-4 pb-3 overflow-x-auto">
          <div className="flex gap-3 min-w-max">
            {CATEGORIES.map((cat) => (
              <motion.button
                key={cat.id}
                className={`px-4 py-2 rounded-full font-medium transition-all ${
                  selectedCategory === cat.id
                    ? 'bg-blue-600 text-white shadow-md'
                    : 'bg-gray-100 text-gray-700'
                }`}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setSelectedCategory(cat.id)}
              >
                <span className="mr-1">{cat.icon}</span>
                {cat.name.ru}
              </motion.button>
            ))}
          </div>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <AnimatePresence>
        {showFilters && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            className="bg-white border-b overflow-hidden"
          >
            <div className="p-4 space-y-4">
              <div>
                <label className="text-sm font-medium text-gray-700 mb-2 block">
                  –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {priceRange[0]} - {priceRange[1]} AED
                </label>
                <input
                  type="range"
                  min="0"
                  max="5000"
                  step="100"
                  value={priceRange[1]}
                  onChange={(e) => setPriceRange([priceRange[0], parseInt(e.target.value)])}
                  className="w-full"
                />
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700 mb-2 block">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</label>
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  className="w-full p-2 border rounded-lg"
                >
                  <option value="popular">–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏</option>
                  <option value="price_asc">–¶–µ–Ω–∞: –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
                  <option value="price_desc">–¶–µ–Ω–∞: –ø–æ —É–±—ã–≤–∞–Ω–∏—é</option>
                  <option value="rating">–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É</option>
                </select>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      <div className="p-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-bold">
            –ù–∞–π–¥–µ–Ω–æ: {filteredServices.length} —É—Å–ª—É–≥
          </h2>
          <motion.button
            className="text-blue-600 font-medium"
            whileHover={{ scale: 1.05 }}
            onClick={() => {
              setSelectedCategory('all');
              setSearchQuery('');
              setPriceRange([0, 5000]);
              setSortBy('popular');
            }}
          >
            –°–±—Ä–æ—Å–∏—Ç—å
          </motion.button>
        </div>

        {filteredServices.length === 0 ? (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-12"
          >
            <div className="text-6xl mb-4">üîç</div>
            <h3 className="text-xl font-semibold mb-2">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
            <p className="text-gray-600">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
          </motion.div>
        ) : (
          <div className="space-y-4 pb-20">
            {filteredServices.map((service, index) => (
              <ServiceCard key={service.id} service={service} index={index} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –£–°–õ–£–ì–ò
const ServiceDetailScreen = ({ serviceId, onNavigate }) => {
  const service = SERVICES.find(s => s.id === serviceId);
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedTime, setSelectedTime] = useState('');
  const [adults, setAdults] = useState(1);
  const [children, setChildren] = useState(0);
  const [showGallery, setShowGallery] = useState(false);
  
  if (!service) return null;

  const totalPrice = service.price * (adults + children * 0.7);
  
  const availableDates = ['2025-02-01', '2025-02-02', '2025-02-03', '2025-02-04', '2025-02-05'];
  const availableTimes = ['09:00', '11:00', '14:00', '16:00', '18:00'];

  const features = [
    { icon: '‚úÖ', text: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ' },
    { icon: 'üí≥', text: '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞' },
    { icon: 'üîÑ', text: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞ 24—á' },
    { icon: 'üë•', text: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥–∏–¥—ã' }
  ];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="min-h-screen bg-gray-50"
    >
      {/* –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
      <div className="relative">
        <motion.img
          src={service.images[0]}
          alt={service.name.ru}
          className="w-full h-64 object-cover"
          whileHover={{ scale: 1.05 }}
          transition={{ duration: 0.3 }}
        />
        <motion.button
          className="absolute top-4 left-4 bg-white/90 backdrop-blur-sm rounded-full p-2 shadow-lg"
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          onClick={() => onNavigate('catalog')}
        >
          <span className="text-xl">‚Üê</span>
        </motion.button>
        <motion.button
          className="absolute bottom-4 right-4 bg-white/90 backdrop-blur-sm rounded-full px-4 py-2 shadow-lg flex items-center gap-2"
          whileHover={{ scale: 1.05 }}
          onClick={() => setShowGallery(true)}
        >
          <span>üì∏</span>
          <span className="text-sm font-medium">–í—Å–µ —Ñ–æ—Ç–æ</span>
        </motion.button>
      </div>

      <div className="p-4">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <AnimatedCard>
          <div className="bg-white rounded-2xl p-4 shadow-md mb-4">
            <div className="flex items-start justify-between mb-3">
              <h1 className="text-2xl font-bold flex-1">{service.name.ru}</h1>
              <div className="text-right">
                <div className="text-2xl font-bold text-blue-600">
                  {service.price} {service.currency}
                </div>
                <div className="text-sm text-gray-500">–∑–∞ —á–µ–ª–æ–≤–µ–∫–∞</div>
              </div>
            </div>
            
            <div className="flex items-center gap-4 text-sm text-gray-600 mb-4">
              <span className="flex items-center gap-1">
                <span>‚è±Ô∏è</span> {Math.floor(service.duration / 60)}—á
              </span>
              <span className="flex items-center gap-1">
                <span>‚≠ê</span> {service.rating} ({service.reviewsCount} –æ—Ç–∑—ã–≤–æ–≤)
              </span>
              <span className="flex items-center gap-1">
                <span>üìç</span> –î—É–±–∞–π
              </span>
            </div>
            
            <p className="text-gray-700 leading-relaxed">{service.description.ru}</p>
          </div>
        </AnimatedCard>

        {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
        <AnimatedCard delay={0.1}>
          <div className="bg-white rounded-2xl p-4 shadow-md mb-4">
            <h3 className="font-bold text-lg mb-3">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h3>
            <div className="grid grid-cols-2 gap-3">
              {features.map((feature, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.2 + index * 0.1 }}
                  className="flex items-center gap-2"
                >
                  <span className="text-xl">{feature.icon}</span>
                  <span className="text-sm">{feature.text}</span>
                </motion.div>
              ))}
            </div>
          </div>
        </AnimatedCard>

        {/* –§–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <AnimatedCard delay={0.2}>
          <div className="bg-white rounded-2xl p-4 shadow-md mb-4">
            <h3 className="font-bold text-lg mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h3>
            
            {/* –í—ã–±–æ—Ä –¥–∞—Ç—ã */}
            <div className="mb-4">
              <label className="text-sm font-medium text-gray-700 mb-2 block">–î–∞—Ç–∞</label>
              <div className="grid grid-cols-3 gap-2">
                {availableDates.map(date => (
                  <motion.button
                    key={date}
                    className={`p-3 rounded-xl text-sm font-medium transition-all ${
                      selectedDate === date
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-700'
                    }`}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setSelectedDate(date)}
                  >
                    {new Date(date).toLocaleDateString('ru', { day: 'numeric', month: 'short' })}
                  </motion.button>
                ))}
              </div>
            </div>

            {/* –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ */}
            {selectedDate && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                className="mb-4"
              >
                <label className="text-sm font-medium text-gray-700 mb-2 block">–í—Ä–µ–º—è</label>
                <div className="grid grid-cols-5 gap-2">
                  {availableTimes.map(time => (
                    <motion.button
                      key={time}
                      className={`p-2 rounded-lg text-sm font-medium transition-all ${
                        selectedTime === time
                          ? 'bg-blue-600 text-white'
                          : 'bg-gray-100 text-gray-700'
                      }`}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => setSelectedTime(time)}
                    >
                      {time}
                    </motion.button>
                  ))}
                </div>
              </motion.div>
            )}

            {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div>
                <label className="text-sm font-medium text-gray-700 mb-2 block">–í–∑—Ä–æ—Å–ª—ã–µ</label>
                <div className="flex items-center gap-3">
                  <motion.button
                    className="w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={() => setAdults(Math.max(1, adults - 1))}
                  >
                    ‚àí
                  </motion.button>
                  <span className="text-xl font-semibold w-8 text-center">{adults}</span>
                  <motion.button
                    className="w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={() => setAdults(adults + 1)}
                  >
                    +
                  </motion.button>
                </div>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700 mb-2 block">–î–µ—Ç–∏</label>
                <div className="flex items-center gap-3">
                  <motion.button
                    className="w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={() => setChildren(Math.max(0, children - 1))}
                  >
                    ‚àí
                  </motion.button>
                  <span className="text-xl font-semibold w-8 text-center">{children}</span>
                  <motion.button
                    className="w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={() => setChildren(children + 1)}
                  >
                    +
                  </motion.button>
                </div>
              </div>
            </div>

            {/* –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ */}
            <div className="border-t pt-4 mb-4">
              <div className="flex justify-between items-center mb-2">
                <span className="text-gray-600">–í–∑—Ä–æ—Å–ª—ã–µ: {adults} √ó {service.price} AED</span>
                <span className="font-medium">{adults * service.price} AED</span>
              </div>
              {children > 0 && (
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-600">–î–µ—Ç–∏: {children} √ó {service.price * 0.7} AED</span>
                  <span className="font-medium">{(children * service.price * 0.7).toFixed(0)} AED</span>
                </div>
              )}
              <div className="flex justify-between items-center text-lg font-bold">
                <span>–ò—Ç–æ–≥–æ:</span>
                <span className="text-blue-600">{totalPrice.toFixed(0)} AED</span>
              </div>
            </div>

            <PulseButton
              size="lg"
              className="w-full"
              onClick={() => {
                if (selectedDate && selectedTime) {
                  onNavigate('booking', {
                    serviceId,
                    date: selectedDate,
                    time: selectedTime,
                    adults,
                    children,
                    totalPrice
                  });
                }
              }}
              disabled={!selectedDate || !selectedTime}
            >
              –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
            </PulseButton>
          </div>
        </AnimatedCard>

        {/* –û—Ç–∑—ã–≤—ã */}
        <AnimatedCard delay={0.3}>
          <div className="bg-white rounded-2xl p-4 shadow-md">
            <h3 className="font-bold text-lg mb-4">–û—Ç–∑—ã–≤—ã ({service.reviewsCount})</h3>
            <div className="space-y-3">
              {[
                { name: '–ê–Ω–Ω–∞ –°.', rating: 5, comment: '–û—Ç–ª–∏—á–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è! –ì–∏–¥ –±—ã–ª –æ—á–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.', date: '2 –¥–Ω—è –Ω–∞–∑–∞–¥' },
                { name: '–ú–∏—Ö–∞–∏–ª –î.', rating: 5, comment: '–í—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!', date: '5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥' },
                { name: '–ï–ª–µ–Ω–∞ –ü.', rating: 4, comment: '–•–æ—Ä–æ—à–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ –¥–æ—Ä–æ–≥–æ–≤–∞—Ç–æ.', date: '1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥' }
              ].map((review, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 + index * 0.1 }}
                  className="border-b last:border-0 pb-3 last:pb-0"
                >
                  <div className="flex items-center justify-between mb-1">
                    <span className="font-medium">{review.name}</span>
                    <span className="text-sm text-gray-500">{review.date}</span>
                  </div>
                  <div className="flex items-center gap-1 mb-1">
                    {[...Array(5)].map((_, i) => (
                      <span key={i} className={i < review.rating ? 'text-yellow-400' : 'text-gray-300'}>
                        ‚òÖ
                      </span>
                    ))}
                  </div>
                  <p className="text-sm text-gray-700">{review.comment}</p>
                </motion.div>
              ))}
            </div>
          </div>
        </AnimatedCard>
      </div>
    </motion.div>
  );
};

// üìù –≠–ö–†–ê–ù –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø
const BookingScreen = ({ bookingData, onNavigate }) => {
  const [step, setStep] = useState(1);
  const [contactInfo, setContactInfo] = useState({
    name: '',
    phone: '',
    email: '',
    hotel: ''
  });
  const [paymentMethod, setPaymentMethod] = useState('card');
  const [specialRequests, setSpecialRequests] = useState('');
  const [agreedToTerms, setAgreedToTerms] = useState(false);

  const service = SERVICES.find(s => s.id === bookingData.serviceId);
  const steps = ['–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–û–ø–ª–∞—Ç–∞', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'];

  const handleNextStep = () => {
    if (step < 3) setStep(step + 1);
  };

  const handlePrevStep = () => {
    if (step > 1) setStep(step - 1);
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="min-h-screen bg-gray-50"
    >
      {/* –®–∞–ø–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
      <div className="bg-white shadow-md p-4">
        <div className="flex items-center justify-between mb-4">
          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={handlePrevStep}
            className="text-xl"
          >
            ‚Üê
          </motion.button>
          <h1 className="text-lg font-bold">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
          <div className="w-6" />
        </div>
        
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
        <div className="flex items-center justify-between">
          {steps.map((stepName, index) => (
            <div key={index} className="flex-1">
              <div className="flex items-center">
                <motion.div
                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                    index + 1 <= step
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-200 text-gray-500'
                  }`}
                  animate={{ scale: index + 1 === step ? 1.2 : 1 }}
                >
                  {index + 1}
                </motion.div>
                {index < steps.length - 1 && (
                  <motion.div
                    className="flex-1 h-1 mx-2"
                    initial={{ scaleX: 0 }}
                    animate={{ 
                      scaleX: index + 1 < step ? 1 : 0,
                      backgroundColor: index + 1 < step ? '#2563eb' : '#e5e7eb'
                    }}
                    style={{ originX: 0 }}
                  />
                )}
              </div>
              <div className="text-xs mt-1">{stepName}</div>
            </div>
          ))}
        </div>
      </div>

      <div className="p-4">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
        <AnimatedCard>
          <div className="bg-white rounded-2xl p-4 shadow-md mb-4">
            <h3 className="font-bold mb-3">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">–£—Å–ª—É–≥–∞:</span>
                <span className="font-medium">{service?.name.ru}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–î–∞—Ç–∞:</span>
                <span className="font-medium">{bookingData.date}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–í—Ä–µ–º—è:</span>
                <span className="font-medium">{bookingData.time}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">–£—á–∞—Å—Ç–Ω–∏–∫–∏:</span>
                <span className="font-medium">
                  {bookingData.adults} –≤–∑—Ä. {bookingData.children > 0 && `+ ${bookingData.children} –¥–µ—Ç.`}
                </span>
              </div>
              <div className="border-t pt-2 mt-2 flex justify-between text-lg font-bold">
                <span>–ò—Ç–æ–≥–æ:</span>
                <span className="text-blue-600">{bookingData.totalPrice} AED</span>
              </div>
            </div>
          </div>
        </AnimatedCard>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞ */}
        <AnimatePresence mode="wait">
          {step === 1 && (
            <motion.div
              key="step1"
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
            >
              <AnimatedCard>
                <div className="bg-white rounded-2xl p-4 shadow-md">
                  <h3 className="font-bold text-lg mb-4">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-1 block">–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</label>
                      <input
                        type="text"
                        value={contactInfo.name}
                        onChange={(e) => setContactInfo({...contactInfo, name: e.target.value})}
                        className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-1 block">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                      <input
                        type="tel"
                        value={contactInfo.phone}
                        onChange={(e) => setContactInfo({...contactInfo, phone: e.target.value})}
                        className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="+971 50 123 4567"
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-1 block">Email</label>
                      <input
                        type="email"
                        value={contactInfo.email}
                        onChange={(e) => setContactInfo({...contactInfo, email: e.target.value})}
                        className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="email@example.com"
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-1 block">–û—Ç–µ–ª—å / –ê–¥—Ä–µ—Å –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞</label>
                      <input
                        type="text"
                        value={contactInfo.hotel}
                        onChange={(e) => setContactInfo({...contactInfo, hotel: e.target.value})}
                        className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Atlantis The Palm"
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-700 mb-1 block">–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</label>
                      <textarea
                        value={specialRequests}
                        onChange={(e) => setSpecialRequests(e.target.value)}
                        className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        rows="3"
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è –µ–¥–∞, –¥–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ..."
                      />
                    </div>
                  </div>
                  
                  <PulseButton
                    size="lg"
                    className="w-full mt-6"
                    onClick={handleNextStep}
                    disabled={!contactInfo.name || !contactInfo.phone || !contactInfo.email}
                  >
                    –î–∞–ª–µ–µ –∫ –æ–ø–ª–∞—Ç–µ
                  </PulseButton>
                </div>
              </AnimatedCard>
            </motion.div>
          )}

          {step === 2 && (
            <motion.div
              key="step2"
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
            >
              <AnimatedCard>
                <div className="bg-white rounded-2xl p-4 shadow-md">
                  <h3 className="font-bold text-lg mb-4">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h3>
                  <div className="space-y-3 mb-6">
                    {[
                      { id: 'card', name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', icon: 'üí≥' },
                      { id: 'paypal', name: 'PayPal', icon: 'üÖøÔ∏è' },
                      { id: 'cash', name: '–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ', icon: 'üíµ' }
                    ].map(method => (
                      <motion.button
                        key={method.id}
                        className={`w-full p-4 rounded-xl border-2 transition-all flex items-center gap-3 ${
                          paymentMethod === method.id
                            ? 'border-blue-600 bg-blue-50'
                            : 'border-gray-200'
                        }`}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => setPaymentMethod(method.id)}
                      >
                        <span className="text-2xl">{method.icon}</span>
                        <span className="font-medium">{method.name}</span>
                        {paymentMethod === method.id && (
                          <motion.span
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            className="ml-auto text-blue-600"
                          >
                            ‚úì
                          </motion.span>
                        )}
                      </motion.button>
                    ))}
                  </div>

                  {paymentMethod === 'card' && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      className="mb-6"
                    >
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <p className="text-sm text-gray-600 mb-3">
                          –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
                        </p>
                        <div className="flex gap-2">
                          <img src="https://upload.wikimedia.org/wikipedia/commons/0/04/Visa.svg" alt="Visa" className="h-8" />
                          <img src="https://upload.wikimedia.org/wikipedia/commons/2/2a/Mastercard-logo.svg" alt="Mastercard" className="h-8" />
                        </div>
                      </div>
                    </motion.div>
                  )}

                  <div className="mb-6">
                    <label className="flex items-start gap-3">
                      <input
                        type="checkbox"
                        checked={agreedToTerms}
                        onChange={(e) => setAgreedToTerms(e.target.checked)}
                        className="mt-1"
                      />
                      <span className="text-sm text-gray-600">
                        –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ—Ç–º–µ–Ω—ã
                      </span>
                    </label>
                  </div>

                  <div className="flex gap-3">
                    <motion.button
                      className="flex-1 py-3 border-2 border-gray-300 rounded-full font-medium"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={handlePrevStep}
                    >
                      –ù–∞–∑–∞–¥
                    </motion.button>
                    <PulseButton
                      size="lg"
                      className="flex-1"
                      onClick={handleNextStep}
                      disabled={!agreedToTerms}
                    >
                      –û–ø–ª–∞—Ç–∏—Ç—å {bookingData.totalPrice} AED
                    </PulseButton>
                  </div>
                </div>
              </AnimatedCard>
            </motion.div>
          )}

          {step === 3 && (
            <motion.div
              key="step3"
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              className="text-center"
            >
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: 0.2, ...THEME.animations.bounce }}
                className="w-24 h-24 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4"
              >
                <span className="text-white text-5xl">‚úì</span>
              </motion.div>
              
              <motion.h2
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
                className="text-2xl font-bold mb-2"
              >
                –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!
              </motion.h2>
              
              <motion.p
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4 }}
                className="text-gray-600 mb-6"
              >
                –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #BK-2025-0001234
              </motion.p>

              <AnimatedCard delay={0.5}>
                <div className="bg-white rounded-2xl p-4 shadow-md mb-4">
                  <div className="space-y-3 text-left">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">üìß</span>
                      <div>
                        <p className="font-medium">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                        <p className="text-sm text-gray-600">{contactInfo.email}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">üì±</span>
                      <div>
                        <p className="font-medium">SMS —Å –¥–µ—Ç–∞–ª—è–º–∏</p>
                        <p className="text-sm text-gray-600">{contactInfo.phone}</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">üé´</span>
                      <div>
                        <p className="font-medium">–í–∞—É—á–µ—Ä –≥–æ—Ç–æ–≤</p>
                        <p className="text-sm text-gray-600">–ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ</p>
                      </div>
                    </div>
                  </div>
                </div>
              </AnimatedCard>

              <div className="space-y-3">
                <PulseButton
                  size="lg"
                  className="w-full"
                  onClick={() => onNavigate('bookings')}
                >
                  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
                </PulseButton>
                <motion.button
                  className="w-full py-3 font-medium text-gray-600"
                  whileHover={{ scale: 1.02 }}
                  onClick={() => onNavigate('home')}
                >
                  –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </motion.button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.div>
  );
};

// üé´ –ú–û–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø
const BookingsScreen = ({ onNavigate }) => {
  const [activeTab, setActiveTab] = useState('upcoming');
  
  const bookings = [
    {
      id: 'BK-2025-0001234',
      service: SERVICES[0],
      date: '2025-02-01',
      time: '09:00',
      status: 'confirmed',
      participants: { adults: 2, children: 1 },
      totalAmount: 750
    },
    {
      id: 'BK-2025-0001235',
      service: SERVICES[2],
      date: '2025-02-05',
      time: '14:00',
      status: 'pending',
      participants: { adults: 4, children: 0 },
      totalAmount: 1500
    }
  ];

  const tabs = [
    { id: 'upcoming', label: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ', count: 2 },
    { id: 'past', label: '–ü—Ä–æ—à–µ–¥—à–∏–µ', count: 5 },
    { id: 'cancelled', label: '–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ', count: 0 }
  ];

  const statusConfig = {
    confirmed: { label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', color: 'green', icon: '‚úÖ' },
    pending: { label: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', color: 'yellow', icon: '‚è≥' },
    cancelled: { label: '–û—Ç–º–µ–Ω–µ–Ω–æ', color: 'red', icon: '‚ùå' }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="min-h-screen bg-gray-50"
    >
      <div className="bg-white shadow-md p-4">
        <h1 className="text-xl font-bold mb-4">–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
        
        <div className="flex gap-2">
          {tabs.map(tab => (
            <motion.button
              key={tab.id}
              className={`flex-1 py-2 px-3 rounded-lg font-medium transition-all ${
                activeTab === tab.id
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-100 text-gray-700'
              }`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setActiveTab(tab.id)}
            >
              {tab.label}
              {tab.count > 0 && (
                <span className="ml-1 bg-white/20 px-2 py-0.5 rounded-full text-xs">
                  {tab.count}
                </span>
              )}
            </motion.button>
          ))}
        </div>
      </div>

      <div className="p-4">
        {activeTab === 'upcoming' && bookings.length > 0 ? (
          <div className="space-y-4">
            {bookings.map((booking, index) => (
              <AnimatedCard key={booking.id} delay={index * 0.1}>
                <motion.div
                  className="bg-white rounded-2xl shadow-md overflow-hidden"
                  whileHover={{ y: -4, boxShadow: THEME.shadows.lg }}
                >
                  <div className="flex">
                    <img
                      src={booking.service.images[0]}
                      alt={booking.service.name.ru}
                      className="w-32 h-32 object-cover"
                    />
                    <div className="flex-1 p-4">
                      <div className="flex items-start justify-between mb-2">
                        <h3 className="font-bold text-lg flex-1">{booking.service.name.ru}</h3>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium bg-${statusConfig[booking.status].color}-100 text-${statusConfig[booking.status].color}-600 flex items-center gap-1`}>
                          <span>{statusConfig[booking.status].icon}</span>
                          {statusConfig[booking.status].label}
                        </span>
                      </div>
                      
                      <div className="space-y-1 text-sm text-gray-600 mb-3">
                        <div className="flex items-center gap-2">
                          <span>üìÖ</span>
                          <span>{new Date(booking.date).toLocaleDateString('ru', { day: 'numeric', month: 'long', year: 'numeric' })}</span>
                          <span>‚Ä¢</span>
                          <span>{booking.time}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <span>üë•</span>
                          <span>{booking.participants.adults} –≤–∑—Ä–æ—Å–ª—ã—Ö</span>
                          {booking.participants.children > 0 && (
                            <span>+ {booking.participants.children} –¥–µ—Ç–µ–π</span>
                          )}
                        </div>
                        <div className="flex items-center gap-2">
                          <span>üí∞</span>
                          <span className="font-medium">{booking.totalAmount} AED</span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <motion.button
                          className="px-3 py-1.5 bg-blue-600 text-white rounded-lg text-sm font-medium"
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—É—á–µ—Ä
                        </motion.button>
                        {booking.status === 'pending' && (
                          <motion.button
                            className="px-3 py-1.5 bg-green-600 text-white rounded-lg text-sm font-medium"
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                          >
                            –û–ø–ª–∞—Ç–∏—Ç—å
                          </motion.button>
                        )}
                        <motion.button
                          className="px-3 py-1.5 border border-gray-300 rounded-lg text-sm font-medium"
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          –û—Ç–º–µ–Ω–∏—Ç—å
                        </motion.button>
                      </div>
                    </div>
                  </div>
                </motion.div>
              </AnimatedCard>
            ))}
          </div>
        ) : (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-12"
          >
            <div className="text-6xl mb-4">üìÖ</div>
            <h3 className="text-xl font-semibold mb-2">–ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</h3>
            <p className="text-gray-600 mb-4">–°–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!</p>
            <PulseButton onClick={() => onNavigate('catalog')}>
              –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏
            </PulseButton>
          </motion.div>
        )}
      </div>
    </motion.div>
  );
};

// üí¨ AI –ß–ê–¢-–ë–û–¢
const ChatBotButton = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    { id: 1, type: 'bot', text: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç—É—Ä–∞–º –≤ –û–ê–≠. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?' }
  ]);
  const [inputText, setInputText] = useState('');

  const quickReplies = [
    '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏',
    '–ü–∞—Ä–∫–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π',
    '–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –î—É–±–∞–µ?',
    '–°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö'
  ];

  const sendMessage = (text) => {
    const userMessage = { id: Date.now(), type: 'user', text };
    setMessages(prev => [...prev, userMessage]);
    setInputText('');

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
    setTimeout(() => {
      const botMessage = {
        id: Date.now() + 1,
        type: 'bot',
        text: '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –Ø –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...'
      };
      setMessages(prev => [...prev, botMessage]);
    }, 1000);
  };

  return (
    <>
      {/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ */}
      <motion.button
        className="fixed bottom-20 right-4 w-14 h-14 bg-blue-600 rounded-full shadow-lg flex items-center justify-center text-white text-2xl z-50"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        animate={{ rotate: isOpen ? 180 : 0 }}
        onClick={() => setIsOpen(!isOpen)}
      >
        {isOpen ? '‚úï' : 'üí¨'}
      </motion.button>

      {/* –û–∫–Ω–æ —á–∞—Ç–∞ */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.8 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.8 }}
            className="fixed bottom-36 right-4 w-80 h-96 bg-white rounded-2xl shadow-2xl z-50 flex flex-col overflow-hidden"
          >
            {/* –®–∞–ø–∫–∞ —á–∞—Ç–∞ */}
            <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                  ü§ñ
                </div>
                <div>
                  <h3 className="font-bold">AI –ü–æ–º–æ—â–Ω–∏–∫</h3>
                  <p className="text-xs opacity-80">–í—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω</p>
                </div>
              </div>
            </div>

            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
              {messages.map((message, index) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, x: message.type === 'user' ? 20 : -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`max-w-[80%] p-3 rounded-2xl ${
                    message.type === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    {message.text}
                  </div>
                </motion.div>
              ))}
            </div>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã */}
            <div className="p-2 border-t">
              <div className="flex gap-2 overflow-x-auto pb-2">
                {quickReplies.map((reply, index) => (
                  <motion.button
                    key={index}
                    className="px-3 py-1 bg-gray-100 rounded-full text-sm whitespace-nowrap"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => sendMessage(reply)}
                  >
                    {reply}
                  </motion.button>
                ))}
              </div>
            </div>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="p-3 border-t">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && inputText && sendMessage(inputText)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  className="flex-1 px-3 py-2 bg-gray-100 rounded-full text-sm focus:outline-none"
                />
                <motion.button
                  className="w-10 h-10 bg-blue-600 text-white rounded-full flex items-center justify-center"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => inputText && sendMessage(inputText)}
                >
                  ‚û§
                </motion.button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

// üéØ –ì–õ–ê–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
export default function App() {
  const [currentScreen, setCurrentScreen] = useState('home');
  const [screenData, setScreenData] = useState({});
  const { webApp } = useTelegram();

  const navigate = (screen, data = {}) => {
    setCurrentScreen(screen);
    setScreenData(data);
    // Haptic feedback
    if (webApp?.HapticFeedback) {
      webApp.HapticFeedback.impactOccurred('light');
    }
  };

  const screens = {
    home: <HomeScreen onNavigate={navigate} />,
    catalog: <CatalogScreen onNavigate={navigate} {...screenData} />,
    service: <ServiceDetailScreen onNavigate={navigate} {...screenData} />,
    booking: <BookingScreen onNavigate={navigate} bookingData={screenData} />,
    bookings: <BookingsScreen onNavigate={navigate} />,
    favorites: (
      <div className="min-h-screen bg-gray-50 p-4 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">‚ù§Ô∏è</div>
          <h2 className="text-xl font-bold mb-2">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</h2>
          <p className="text-gray-600">–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —É—Å–ª—É–≥–∏</p>
        </div>
      </div>
    ),
    promos: (
      <div className="min-h-screen bg-gray-50 p-4 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üéÅ</div>
          <h2 className="text-xl font-bold mb-2">–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏</h2>
          <p className="text-gray-600">–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—Å</p>
        </div>
      </div>
    ),
    support: (
      <div className="min-h-screen bg-gray-50 p-4 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üí¨</div>
          <h2 className="text-xl font-bold mb-2">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</h2>
          <p className="text-gray-600">–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!</p>
          <div className="mt-4 space-y-2">
            <a href="tel:+971501234567" className="block text-blue-600 font-medium">üìû +971 50 123 4567</a>
            <a href="https://wa.me/971501234567" className="block text-green-600 font-medium">üí¨ WhatsApp</a>
          </div>
        </div>
      </div>
    )
  };

  return (
    <div className="relative min-h-screen overflow-hidden">
      <AnimatePresence mode="wait">
        <motion.div
          key={currentScreen}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
        >
          {screens[currentScreen]}
        </motion.div>
      </AnimatePresence>

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <motion.div 
        className="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg z-40"
        initial={{ y: 100 }}
        animate={{ y: 0 }}
        transition={{ delay: 0.5, ...THEME.animations.spring }}
      >
        <div className="flex justify-around items-center py-2">
          {[
            { id: 'home', icon: 'üè†', label: '–ì–ª–∞–≤–Ω–∞—è' },
            { id: 'catalog', icon: 'üéØ', label: '–ö–∞—Ç–∞–ª–æ–≥' },
            { id: 'bookings', icon: 'üé´', label: '–ó–∞–∫–∞–∑—ã' },
            { id: 'favorites', icon: '‚ù§Ô∏è', label: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' }
          ].map((item) => (
            <motion.button
              key={item.id}
              className={`flex flex-col items-center justify-center p-2 flex-1 ${
                currentScreen === item.id ? 'text-blue-600' : 'text-gray-500'
              }`}
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => navigate(item.id)}
            >
              <span className="text-2xl mb-1">{item.icon}</span>
              <span className="text-xs font-medium">{item.label}</span>
            </motion.button>
          ))}
        </div>
      </motion.div>

      {/* AI –ß–∞—Ç-–±–æ—Ç */}
      <ChatBotButton />
    </div>
  );
}